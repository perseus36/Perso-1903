#!/usr/bin/env python3
"""
Perso-1903 Manuel Emir Sistemi
Recall API odaklƒ± limit ve market emir sistemi
"""

import os
import time
import logging
import threading
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from dotenv import load_dotenv
from perso_1903_client import (
    get_portfolio, get_price, execute_trade, 
    get_health, get_competition_rules
)
from competition_rules_manager import CompetitionRulesManager

# Environment setup
load_dotenv()

# Logging configuration
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/agent.jsonl'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ManualOrderSystem:
    """Manuel emir sistemi - Recall API odaklƒ±"""
    
    def __init__(self):
        self.active_orders = {}  # Aktif emirler
        self.order_counter = 0   # Emir saya√ß
        self.order_history = []  # Emir ge√ßmi≈üi
        # Fiyat takip sistemi kaldƒ±rƒ±ldƒ±
        self.competition_manager = CompetitionRulesManager()  # Yarƒ±≈üma kurallarƒ± y√∂neticisi
        
        # API health check
        self.check_api_health()
        
        logger.info("üöÄ Manuel Emir Sistemi ba≈ülatƒ±ldƒ±")
        logger.info("üì° Recall API odaklƒ± sistem aktif")
        logger.info("üí∞ Token fiyat takip sistemi aktif")
        logger.info("üèÜ Yarƒ±≈üma kurallarƒ± y√∂neticisi aktif")
        
        # Sistem durumu raporu
        self.system_start_time = datetime.now()
        logger.info(f"‚è∞ Sistem ba≈ülatma zamanƒ±: {self.system_start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    def get_system_uptime(self) -> str:
        """Sistem √ßalƒ±≈üma s√ºresini d√∂nd√ºr"""
        uptime = datetime.now() - self.system_start_time
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    def get_system_status(self) -> Dict[str, Any]:
        """Sistem durumu raporu"""
        return {
            "start_time": self.system_start_time.strftime('%Y-%m-%d %H:%M:%S'),
            "uptime": self.get_system_uptime(),
            "active_orders": len(self.active_orders),
            "total_orders": self.order_counter,
            "api_health": self.check_api_health()
        }
    
    def check_api_health(self) -> bool:
        """API saƒülƒ±k kontrol√º"""
        try:
            health = get_health()
            if health.get("status") == "ok":
                logger.info("‚úÖ Recall API saƒülƒ±klƒ±")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è API saƒülƒ±k durumu: {health}")
                return False
        except Exception as e:
            logger.error(f"‚ùå API saƒülƒ±k kontrol√º ba≈üarƒ±sƒ±z: {e}")
            return False
    
    def create_limit_order(self, 
                          token_address: str, 
                          token_symbol: str,
                          chain: str,
                          specific_chain: str,
                          limit_price: float,
                          amount_usd: float,
                          order_type: str = "buy") -> Dict[str, Any]:
        """Limit emir olu≈ütur"""
        
        self.order_counter += 1
        order_id = f"LIMIT_{self.order_counter:04d}"
        
        order = {
            "id": order_id,
            "type": "limit",
            "order_type": order_type,  # "buy" or "sell"
            "token_address": token_address,
            "token_symbol": token_symbol,
                "chain": chain,
            "specific_chain": specific_chain,
            "limit_price": limit_price,
            "amount_usd": amount_usd,
            "status": "active",
            "created_at": datetime.now(),
            "executed_at": None,
            "execution_price": None,
            "execution_amount": None
        }
        
        self.active_orders[order_id] = order
        self.order_history.append(order.copy())
        
        logger.info(f"üìã Limit emir olu≈üturuldu: {order_id}")
        logger.info(f"   Token: {token_symbol} ({token_address})")
        logger.info(f"   Aƒü: {specific_chain}")
        logger.info(f"   Limit fiyat: ${limit_price:.4f}")
        logger.info(f"   Miktar: ${amount_usd:.2f}")
        logger.info(f"   Tip: {order_type.upper()}")
        
        return order
    
    def create_market_order(self,
                           token_address: str,
                           token_symbol: str,
                           chain: str,
                           specific_chain: str,
                           amount_usd: float,
                           order_type: str = "buy") -> Dict[str, Any]:
        """Market emir olu≈ütur ve hemen √ßalƒ±≈ütƒ±r"""
        
        self.order_counter += 1
        order_id = f"MARKET_{self.order_counter:04d}"
        
        order = {
            "id": order_id,
            "type": "market",
            "order_type": order_type,
            "token_address": token_address,
            "token_symbol": token_symbol,
            "chain": chain,
            "specific_chain": specific_chain,
            "amount_usd": amount_usd,
            "status": "executing",
            "created_at": datetime.now(),
            "executed_at": None,
            "execution_price": None,
            "execution_amount": None
        }
        
        logger.info(f"‚ö° Market emir olu≈üturuldu: {order_id}")
        logger.info(f"   Token: {token_symbol} ({token_address})")
        logger.info(f"   Aƒü: {specific_chain}")
        logger.info(f"   Miktar: ${amount_usd:.2f}")
        logger.info(f"   Tip: {order_type.upper()}")
        
        # Market emri hemen √ßalƒ±≈ütƒ±r
        execution_result = self.execute_market_order(order)
        
        if execution_result["success"]:
            order["status"] = "executed"
            order["executed_at"] = datetime.now()
            order["execution_price"] = execution_result.get("price")
            order["execution_amount"] = execution_result.get("amount")
            logger.info(f"‚úÖ Market emir ba≈üarƒ±yla ger√ßekle≈üti: {order_id}")
        else:
            order["status"] = "failed"
            logger.error(f"‚ùå Market emir ba≈üarƒ±sƒ±z: {order_id}")
            logger.error(f"   Hata: {execution_result.get('error')}")
        
        self.order_history.append(order)
        
        # Yarƒ±≈üma kurallarƒ±na g√∂re i≈ülemi kaydet
        if execution_result["success"]:
            self.competition_manager.record_trade({
                "timestamp": datetime.now().isoformat(),
                "amount_usd": order["amount_usd"],
                "token_symbol": order["token_symbol"],
                "trade_type": f"market_{order['order_type']}",
                "order_id": order_id,
                "execution_price": execution_result.get("price"),
                "chain": order["specific_chain"]
            })
        
        return order
    
    def execute_market_order(self, order: Dict[str, Any]) -> Dict[str, Any]:
        """Market emri √ßalƒ±≈ütƒ±r"""
        
        try:
            # G√ºncel fiyat al
            price_data = get_price(
                order["token_address"],
                order["chain"],
                order["specific_chain"]
            )
            
            if not price_data.get("success"):
                return {
                    "success": False,
                    "error": f"Fiyat verisi alƒ±namadƒ±: {price_data.get('error')}"
                }
            
            current_price = float(price_data["price"])
            
            # Trade parametreleri
            if order["order_type"] == "buy":
                from_token = self.get_stablecoin_address(order["specific_chain"])
                to_token = order["token_address"]
                amount = str(order["amount_usd"])
            else:  # sell
                from_token = order["token_address"]
                to_token = self.get_stablecoin_address(order["specific_chain"])
                amount = str(order["amount_usd"])
            
            # Trade √ßalƒ±≈ütƒ±r
            trade_result = execute_trade(
                from_token=from_token,
                to_token=to_token,
                amount=amount,
                from_chain=order["chain"],
                to_chain=order["chain"],
                from_specific_chain=order["specific_chain"],
                to_specific_chain=order["specific_chain"],
                reason=f"Market {order['order_type']} - {order['token_symbol']}"
            )
            
            if trade_result.get("success"):
                # Fiyat takip sistemi kaldƒ±rƒ±ldƒ±
                
                return {
                    "success": True,
                    "price": current_price,
                    "amount": order["amount_usd"],
                    "trade_result": trade_result
                }
            else:
                return {
                    "success": False,
                    "error": trade_result.get("error", "Bilinmeyen hata")
                }
        
        except Exception as e:
            return {
                "success": False,
                "error": f"Market emir hatasƒ±: {str(e)}"
            }
    
    def check_limit_orders(self) -> None:
        """Aktif limit emirleri kontrol et"""
        
        if not self.active_orders:
            return
        
        logger.info(f"üîç {len(self.active_orders)} aktif limit emir kontrol ediliyor...")
        
        for order_id, order in list(self.active_orders.items()):
            try:
                # G√ºncel fiyat al
                price_data = get_price(
                    order["token_address"],
                    order["chain"],
                    order["specific_chain"]
                )
                
                if not price_data.get("success"):
                    logger.warning(f"‚ö†Ô∏è {order_id} i√ßin fiyat alƒ±namadƒ±")
                    continue
                
                current_price = float(price_data["price"])
                
                # Limit ko≈üulu kontrol et
                should_execute = False
                
                if order["order_type"] == "buy":
                    should_execute = current_price <= order["limit_price"]
                else:  # sell
                    should_execute = current_price >= order["limit_price"]
                
                if should_execute:
                    logger.info(f"üéØ Limit emir ko≈üulu saƒülandƒ±: {order_id}")
                    logger.info(f"   G√ºncel fiyat: ${current_price:.4f}")
                    logger.info(f"   Limit fiyat: ${order['limit_price']:.4f}")
                    
                    # Emri √ßalƒ±≈ütƒ±r
                    execution_result = self.execute_limit_order(order, current_price)
                    
                    if execution_result["success"]:
                        order["status"] = "executed"
                        order["executed_at"] = datetime.now()
                        order["execution_price"] = current_price
                        order["execution_amount"] = order["amount_usd"]
                        
                        logger.info(f"‚úÖ Limit emir ba≈üarƒ±yla ger√ßekle≈üti: {order_id}")
                        
                        # Yarƒ±≈üma kurallarƒ±na g√∂re i≈ülemi kaydet
                        self.competition_manager.record_trade({
                            "timestamp": datetime.now().isoformat(),
                            "amount_usd": order["amount_usd"],
                            "token_symbol": order["token_symbol"],
                            "trade_type": f"limit_{order['order_type']}",
                            "order_id": order_id,
                            "execution_price": current_price,
                            "chain": order["specific_chain"]
                        })
                        
                        # Aktif emirlerden kaldƒ±r
                        del self.active_orders[order_id]
                    else:
                        logger.error(f"‚ùå Limit emir ba≈üarƒ±sƒ±z: {order_id}")
                        logger.error(f"   Hata: {execution_result.get('error')}")
                else:
                    logger.debug(f"‚è≥ {order_id} bekliyor - Fiyat: ${current_price:.4f}, Limit: ${order['limit_price']:.4f}")
                    
            except Exception as e:
                logger.error(f"‚ùå {order_id} kontrol hatasƒ±: {e}")
    
    def execute_limit_order(self, order: Dict[str, Any], execution_price: float) -> Dict[str, Any]:
        """Limit emri √ßalƒ±≈ütƒ±r"""
        
        try:
            # Trade parametreleri
            if order["order_type"] == "buy":
                from_token = self.get_stablecoin_address(order["specific_chain"])
                to_token = order["token_address"]
                amount = str(order["amount_usd"])
            else:  # sell
                from_token = order["token_address"]
                to_token = self.get_stablecoin_address(order["specific_chain"])
                amount = str(order["amount_usd"])
            
            # Trade √ßalƒ±≈ütƒ±r
            trade_result = execute_trade(
                from_token=from_token,
                to_token=to_token,
                amount=amount,
                from_chain=order["chain"],
                to_chain=order["chain"],
                from_specific_chain=order["specific_chain"],
                to_specific_chain=order["specific_chain"],
                reason=f"Limit {order['order_type']} - {order['token_symbol']} @ ${execution_price:.4f}"
            )
            
            if trade_result.get("success"):
                # Fiyat takip sistemi kaldƒ±rƒ±ldƒ±
                
                return {
                    "success": True,
                    "price": execution_price,
                    "amount": order["amount_usd"],
                    "trade_result": trade_result
                }
            else:
                return {
                    "success": False,
                    "error": trade_result.get("error", "Bilinmeyen hata")
                }
        
        except Exception as e:
            return {
                "success": False,
                "error": f"Limit emir hatasƒ±: {str(e)}"
            }
    
    def get_stablecoin_address(self, specific_chain: str) -> str:
        """Aƒüa g√∂re stablecoin adresi d√∂nd√ºr"""
        
        stablecoin_addresses = {
            "ethereum": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",  # USDC
            "polygon": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",    # USDC
            "arbitrum": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",  # USDC
            "optimism": "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",  # USDC
            "base": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",      # USDbC
            "bsc": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",       # USDC
            "avalanche": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E", # USDC
            "solana": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"   # USDC
        }
        
        return stablecoin_addresses.get(specific_chain.lower(), stablecoin_addresses["ethereum"])
    
    def cancel_order(self, order_id: str) -> bool:
        """Emri iptal et"""
        
        if order_id in self.active_orders:
            order = self.active_orders[order_id]
            order["status"] = "cancelled"
            order["executed_at"] = datetime.now()
            
            del self.active_orders[order_id]
            
            logger.info(f"‚ùå Emir iptal edildi: {order_id}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Emir bulunamadƒ±: {order_id}")
            return False
    
    def get_order_status(self, order_id: str) -> Optional[Dict[str, Any]]:
        """Emir durumu sorgula"""
        
        # Aktif emirlerde ara
        if order_id in self.active_orders:
            return self.active_orders[order_id]
        
        # Ge√ßmi≈üte ara
        for order in self.order_history:
            if order["id"] == order_id:
                return order
        
        return None
    
    def list_active_orders(self) -> List[Dict[str, Any]]:
        """Aktif emirleri listele"""
        return list(self.active_orders.values())
    
    def list_order_history(self, limit: int = 50) -> List[Dict[str, Any]]:
        """Emir ge√ßmi≈üini listele"""
        return self.order_history[-limit:] if self.order_history else []
    
    def get_portfolio_summary(self) -> Dict[str, Any]:
        """Portf√∂y √∂zeti al"""
        try:
            portfolio = get_portfolio()
            if portfolio.get("success"):
                return portfolio
            else:
                logger.error(f"Portfolio alƒ±namadƒ±: {portfolio}")
                return {"success": False, "error": "Portfolio alƒ±namadƒ±"}
        except Exception as e:
            logger.error(f"Portfolio hatasƒ±: {e}")
            return {"success": False, "error": str(e)}
    
    def run_order_monitor(self, interval_minutes: int = 1) -> None:
        """Emir monit√∂r√º √ßalƒ±≈ütƒ±r"""
        
        logger.info(f"üîÑ Emir monit√∂r√º ba≈ülatƒ±ldƒ± (her {interval_minutes} dakikada)")
        
        while True:
            try:
                self.check_limit_orders()
                time.sleep(interval_minutes * 60)
            except KeyboardInterrupt:
                logger.info("üõë Emir monit√∂r√º durduruldu")
                break
            except Exception as e:
                logger.error(f"‚ùå Monit√∂r hatasƒ±: {e}")
                time.sleep(30)  # Hata durumunda 30 saniye bekle


class Perso1903Agent:
    """Ana agent sƒ±nƒ±fƒ± - Manuel emir sistemi"""
    
    def __init__(self):
        self.order_system = ManualOrderSystem()
        logger.info("ü§ñ Perso-1903 Agent ba≈ülatƒ±ldƒ±")
        logger.info("üìã Manuel emir sistemi aktif")
    
    def create_buy_limit_order(self, token_address: str, token_symbol: str, 
                              chain: str, specific_chain: str, 
                              limit_price: float, amount_usd: float) -> Dict[str, Any]:
        """Alƒ±m limit emri olu≈ütur"""
        return self.order_system.create_limit_order(
            token_address, token_symbol, chain, specific_chain, 
            limit_price, amount_usd, "buy"
        )
    
    def create_sell_limit_order(self, token_address: str, token_symbol: str,
                               chain: str, specific_chain: str,
                               limit_price: float, amount_usd: float) -> Dict[str, Any]:
        """Satƒ±m limit emri olu≈ütur"""
        return self.order_system.create_limit_order(
            token_address, token_symbol, chain, specific_chain,
            limit_price, amount_usd, "sell"
        )
    
    def create_buy_market_order(self, token_address: str, token_symbol: str,
                               chain: str, specific_chain: str, 
                               amount_usd: float) -> Dict[str, Any]:
        """Alƒ±m market emri olu≈ütur"""
        return self.order_system.create_market_order(
            token_address, token_symbol, chain, specific_chain,
            amount_usd, "buy"
        )
    
    def create_sell_market_order(self, token_address: str, token_symbol: str,
                                chain: str, specific_chain: str,
                                amount_usd: float) -> Dict[str, Any]:
        """Satƒ±m market emri olu≈ütur"""
        return self.order_system.create_market_order(
            token_address, token_symbol, chain, specific_chain,
            amount_usd, "sell"
        )
    
    def cancel_order(self, order_id: str) -> bool:
        """Emri iptal et"""
        return self.order_system.cancel_order(order_id)
    
    def get_order_status(self, order_id: str) -> Optional[Dict[str, Any]]:
        """Emir durumu sorgula"""
        return self.order_system.get_order_status(order_id)
    
    def list_active_orders(self) -> List[Dict[str, Any]]:
        """Aktif emirleri listele"""
        return self.order_system.list_active_orders()
    
    def list_order_history(self, limit: int = 50) -> List[Dict[str, Any]]:
        """Emir ge√ßmi≈üini listele"""
        return self.order_system.list_order_history(limit)
    
    def get_portfolio_summary(self) -> Dict[str, Any]:
        """Portf√∂y √∂zeti al"""
        return self.order_system.get_portfolio_summary()
    
    def start_order_monitor(self, interval_minutes: int = 1) -> None:
        """Emir monit√∂r√º ba≈ülat"""
        self.order_system.run_order_monitor(interval_minutes)
    
    # Fiyat takip sistemi kaldƒ±rƒ±ldƒ±
    
    def check_daily_trading_requirement(self) -> Dict[str, Any]:
        """G√ºnl√ºk i≈ülem gereksinimini kontrol et"""
        return self.order_system.competition_manager.check_daily_requirement()
    
    def get_competition_status(self) -> Dict[str, Any]:
        """Yarƒ±≈üma durumunu kontrol et"""
        return self.order_system.competition_manager.get_competition_status()
    
    def generate_daily_report(self) -> str:
        """G√ºnl√ºk rapor olu≈ütur"""
        return self.order_system.competition_manager.generate_daily_report()
    
    def sync_with_api(self) -> None:
        """API ile senkronize et"""
        self.order_system.competition_manager.sync_daily_trades_with_api()


if __name__ == "__main__":
    print("üöÄ Perso-1903 Manuel Emir Sistemi")
    print("=" * 50)
    
    # Agent olu≈ütur
    agent = Perso1903Agent()
    
    # Portf√∂y √∂zeti
    print("\nüìä Portf√∂y √ñzeti:")
    portfolio = agent.get_portfolio_summary()
    if portfolio.get("success"):
        print(f"Toplam Deƒüer: ${portfolio.get('totalValue', 0):.2f}")
        print(f"Token Sayƒ±sƒ±: {len(portfolio.get('tokens', []))}")
    else:
        print(f"‚ùå Portfolio alƒ±namadƒ±: {portfolio.get('error')}")
    
    # Yarƒ±≈üma durumu
    print("\nüèÜ Yarƒ±≈üma Durumu:")
    competition_status = agent.get_competition_status()
    if competition_status.get("success"):
        print(f"Aktif: {'‚úÖ Evet' if competition_status.get('active') else '‚ùå Hayƒ±r'}")
        if competition_status.get("active"):
            print(f"Kalan G√ºnler: {competition_status.get('days_remaining', 0)}")
    else:
        print(f"‚ùå Yarƒ±≈üma durumu alƒ±namadƒ±: {competition_status.get('error')}")
    
    # G√ºnl√ºk i≈ülem kontrol√º
    print("\nüìä G√ºnl√ºk ƒ∞≈ülem Kontrol√º:")
    daily_check = agent.check_daily_trading_requirement()
    print(f"G√ºn: {daily_check['day']}")
    print(f"Mevcut ƒ∞≈ülemler: {daily_check['current_trades']}")
    print(f"Minimum Gereksinim: {daily_check['min_required']}")
    print(f"Durum: {daily_check['status']}")
    
    # Sistem durumu
    print("\nüñ•Ô∏è Sistem Durumu:")
    system_status = agent.get_system_status()
    print(f"Ba≈ülatma Zamanƒ±: {system_status['start_time']}")
    print(f"√áalƒ±≈üma S√ºresi: {system_status['uptime']}")
    print(f"Aktif Emirler: {system_status['active_orders']}")
    print(f"Toplam Emirler: {system_status['total_orders']}")
    print(f"API Durumu: {'‚úÖ Saƒülƒ±klƒ±' if system_status['api_health'] else '‚ùå Sorunlu'}")
    
    # Aktif emirler
    print("\nüìã Aktif Emirler:")
    active_orders = agent.list_active_orders()
    if active_orders:
        for order in active_orders:
            print(f"  {order['id']}: {order['token_symbol']} - ${order['limit_price']:.4f}")
    else:
        print("  Aktif emir yok")
    
    # G√ºnl√ºk rapor
    print("\nüìã G√ºnl√ºk Rapor:")
    daily_report = agent.generate_daily_report()
    print(daily_report)
    
    print("\n‚úÖ Manuel emir sistemi hazƒ±r!")
    print("üìù Kullanƒ±m √∂rnekleri:")
    print("  agent.create_buy_limit_order('token_address', 'SYMBOL', 'chain', 'specific_chain', limit_price, amount)")
    print("  agent.create_buy_market_order('token_address', 'SYMBOL', 'chain', 'specific_chain', amount)")
    print("  agent.start_order_monitor()  # Limit emirleri izlemek i√ßin")
    print("  agent.check_daily_trading_requirement()  # G√ºnl√ºk i≈ülem kontrol√º")
    print("  agent.sync_with_api()  # API ile senkronize et")
